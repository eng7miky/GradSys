#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GradingSystem
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GradingSystem")]
	public partial class GradingSystem_DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClass(Class instance);
    partial void UpdateClass(Class instance);
    partial void DeleteClass(Class instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertEnrollment(Enrollment instance);
    partial void UpdateEnrollment(Enrollment instance);
    partial void DeleteEnrollment(Enrollment instance);
    partial void InsertProfessor(Professor instance);
    partial void UpdateProfessor(Professor instance);
    partial void DeleteProfessor(Professor instance);
    partial void InsertProfessor_Phone(Professor_Phone instance);
    partial void UpdateProfessor_Phone(Professor_Phone instance);
    partial void DeleteProfessor_Phone(Professor_Phone instance);
    partial void InsertSemester(Semester instance);
    partial void UpdateSemester(Semester instance);
    partial void DeleteSemester(Semester instance);
    partial void InsertSemester_Year(Semester_Year instance);
    partial void UpdateSemester_Year(Semester_Year instance);
    partial void DeleteSemester_Year(Semester_Year instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertStudent_Phone(Student_Phone instance);
    partial void UpdateStudent_Phone(Student_Phone instance);
    partial void DeleteStudent_Phone(Student_Phone instance);
    #endregion
		
		public GradingSystem_DataClassesDataContext() : 
				base(global::GradingSystem.Properties.Settings.Default.GradingSystemConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GradingSystem_DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GradingSystem_DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GradingSystem_DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GradingSystem_DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Class> Classes
		{
			get
			{
				return this.GetTable<Class>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Enrollment> Enrollments
		{
			get
			{
				return this.GetTable<Enrollment>();
			}
		}
		
		public System.Data.Linq.Table<Professor> Professors
		{
			get
			{
				return this.GetTable<Professor>();
			}
		}
		
		public System.Data.Linq.Table<Professor_Phone> Professor_Phones
		{
			get
			{
				return this.GetTable<Professor_Phone>();
			}
		}
		
		public System.Data.Linq.Table<Semester> Semesters
		{
			get
			{
				return this.GetTable<Semester>();
			}
		}
		
		public System.Data.Linq.Table<Semester_Year> Semester_Years
		{
			get
			{
				return this.GetTable<Semester_Year>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Student_Phone> Student_Phones
		{
			get
			{
				return this.GetTable<Student_Phone>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Class")]
	public partial class Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Course_code;
		
		private int _Semester_id;
		
		private System.Nullable<int> _Max_enrollment;
		
		private System.Nullable<int> _Enrollment;
		
		private System.Nullable<System.DateTime> _Class_time;
		
		private EntitySet<Enrollment> _Enrollments;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Semester_Year> _Semester_Year;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourse_codeChanging(int value);
    partial void OnCourse_codeChanged();
    partial void OnSemester_idChanging(int value);
    partial void OnSemester_idChanged();
    partial void OnMax_enrollmentChanging(System.Nullable<int> value);
    partial void OnMax_enrollmentChanged();
    partial void OnEnrollmentChanging(System.Nullable<int> value);
    partial void OnEnrollmentChanged();
    partial void OnClass_timeChanging(System.Nullable<System.DateTime> value);
    partial void OnClass_timeChanged();
    #endregion
		
		public Class()
		{
			this._Enrollments = new EntitySet<Enrollment>(new Action<Enrollment>(this.attach_Enrollments), new Action<Enrollment>(this.detach_Enrollments));
			this._Course = default(EntityRef<Course>);
			this._Semester_Year = default(EntityRef<Semester_Year>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Course_code", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Course_code
		{
			get
			{
				return this._Course_code;
			}
			set
			{
				if ((this._Course_code != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourse_codeChanging(value);
					this.SendPropertyChanging();
					this._Course_code = value;
					this.SendPropertyChanged("Course_code");
					this.OnCourse_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Semester_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Semester_id
		{
			get
			{
				return this._Semester_id;
			}
			set
			{
				if ((this._Semester_id != value))
				{
					if (this._Semester_Year.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSemester_idChanging(value);
					this.SendPropertyChanging();
					this._Semester_id = value;
					this.SendPropertyChanged("Semester_id");
					this.OnSemester_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Max_enrollment", DbType="Int")]
		public System.Nullable<int> Max_enrollment
		{
			get
			{
				return this._Max_enrollment;
			}
			set
			{
				if ((this._Max_enrollment != value))
				{
					this.OnMax_enrollmentChanging(value);
					this.SendPropertyChanging();
					this._Max_enrollment = value;
					this.SendPropertyChanged("Max_enrollment");
					this.OnMax_enrollmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enrollment", DbType="Int")]
		public System.Nullable<int> Enrollment
		{
			get
			{
				return this._Enrollment;
			}
			set
			{
				if ((this._Enrollment != value))
				{
					this.OnEnrollmentChanging(value);
					this.SendPropertyChanging();
					this._Enrollment = value;
					this.SendPropertyChanged("Enrollment");
					this.OnEnrollmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Class_time", DbType="DateTime")]
		public System.Nullable<System.DateTime> Class_time
		{
			get
			{
				return this._Class_time;
			}
			set
			{
				if ((this._Class_time != value))
				{
					this.OnClass_timeChanging(value);
					this.SendPropertyChanging();
					this._Class_time = value;
					this.SendPropertyChanged("Class_time");
					this.OnClass_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Enrollment", Storage="_Enrollments", ThisKey="Course_code,Semester_id", OtherKey="Course_code,Semester_id")]
		public EntitySet<Enrollment> Enrollments
		{
			get
			{
				return this._Enrollments;
			}
			set
			{
				this._Enrollments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Class", Storage="_Course", ThisKey="Course_code", OtherKey="Course_code", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Classes.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Classes.Add(this);
						this._Course_code = value.Course_code;
					}
					else
					{
						this._Course_code = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_Year_Class", Storage="_Semester_Year", ThisKey="Semester_id", OtherKey="Semester_id", IsForeignKey=true)]
		public Semester_Year Semester_Year
		{
			get
			{
				return this._Semester_Year.Entity;
			}
			set
			{
				Semester_Year previousValue = this._Semester_Year.Entity;
				if (((previousValue != value) 
							|| (this._Semester_Year.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Semester_Year.Entity = null;
						previousValue.Classes.Remove(this);
					}
					this._Semester_Year.Entity = value;
					if ((value != null))
					{
						value.Classes.Add(this);
						this._Semester_id = value.Semester_id;
					}
					else
					{
						this._Semester_id = default(int);
					}
					this.SendPropertyChanged("Semester_Year");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Enrollments(Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_Enrollments(Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Course_code;
		
		private string _Course_name;
		
		private System.Nullable<int> _Credit_hours;
		
		private System.Nullable<int> _Professor_id;
		
		private EntitySet<Class> _Classes;
		
		private EntityRef<Professor> _Professor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourse_codeChanging(int value);
    partial void OnCourse_codeChanged();
    partial void OnCourse_nameChanging(string value);
    partial void OnCourse_nameChanged();
    partial void OnCredit_hoursChanging(System.Nullable<int> value);
    partial void OnCredit_hoursChanged();
    partial void OnProfessor_idChanging(System.Nullable<int> value);
    partial void OnProfessor_idChanged();
    #endregion
		
		public Course()
		{
			this._Classes = new EntitySet<Class>(new Action<Class>(this.attach_Classes), new Action<Class>(this.detach_Classes));
			this._Professor = default(EntityRef<Professor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Course_code", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Course_code
		{
			get
			{
				return this._Course_code;
			}
			set
			{
				if ((this._Course_code != value))
				{
					this.OnCourse_codeChanging(value);
					this.SendPropertyChanging();
					this._Course_code = value;
					this.SendPropertyChanged("Course_code");
					this.OnCourse_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Course_name", DbType="VarChar(50)")]
		public string Course_name
		{
			get
			{
				return this._Course_name;
			}
			set
			{
				if ((this._Course_name != value))
				{
					this.OnCourse_nameChanging(value);
					this.SendPropertyChanging();
					this._Course_name = value;
					this.SendPropertyChanged("Course_name");
					this.OnCourse_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Credit_hours", DbType="Int")]
		public System.Nullable<int> Credit_hours
		{
			get
			{
				return this._Credit_hours;
			}
			set
			{
				if ((this._Credit_hours != value))
				{
					this.OnCredit_hoursChanging(value);
					this.SendPropertyChanging();
					this._Credit_hours = value;
					this.SendPropertyChanged("Credit_hours");
					this.OnCredit_hoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Professor_id", DbType="Int")]
		public System.Nullable<int> Professor_id
		{
			get
			{
				return this._Professor_id;
			}
			set
			{
				if ((this._Professor_id != value))
				{
					if (this._Professor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfessor_idChanging(value);
					this.SendPropertyChanging();
					this._Professor_id = value;
					this.SendPropertyChanged("Professor_id");
					this.OnProfessor_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Class", Storage="_Classes", ThisKey="Course_code", OtherKey="Course_code")]
		public EntitySet<Class> Classes
		{
			get
			{
				return this._Classes;
			}
			set
			{
				this._Classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Professor_Course", Storage="_Professor", ThisKey="Professor_id", OtherKey="Professor_id", IsForeignKey=true)]
		public Professor Professor
		{
			get
			{
				return this._Professor.Entity;
			}
			set
			{
				Professor previousValue = this._Professor.Entity;
				if (((previousValue != value) 
							|| (this._Professor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Professor.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Professor.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._Professor_id = value.Professor_id;
					}
					else
					{
						this._Professor_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Professor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Dept_no;
		
		private string _Dept_name;
		
		private string _location;
		
		private EntitySet<Professor> _Professors;
		
		private EntitySet<Student> _Students;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDept_noChanging(int value);
    partial void OnDept_noChanged();
    partial void OnDept_nameChanging(string value);
    partial void OnDept_nameChanged();
    partial void OnlocationChanging(string value);
    partial void OnlocationChanged();
    #endregion
		
		public Department()
		{
			this._Professors = new EntitySet<Professor>(new Action<Professor>(this.attach_Professors), new Action<Professor>(this.detach_Professors));
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dept_no", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Dept_no
		{
			get
			{
				return this._Dept_no;
			}
			set
			{
				if ((this._Dept_no != value))
				{
					this.OnDept_noChanging(value);
					this.SendPropertyChanging();
					this._Dept_no = value;
					this.SendPropertyChanged("Dept_no");
					this.OnDept_noChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dept_name", DbType="VarChar(50)")]
		public string Dept_name
		{
			get
			{
				return this._Dept_name;
			}
			set
			{
				if ((this._Dept_name != value))
				{
					this.OnDept_nameChanging(value);
					this.SendPropertyChanging();
					this._Dept_name = value;
					this.SendPropertyChanged("Dept_name");
					this.OnDept_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_location", DbType="VarChar(50)")]
		public string location
		{
			get
			{
				return this._location;
			}
			set
			{
				if ((this._location != value))
				{
					this.OnlocationChanging(value);
					this.SendPropertyChanging();
					this._location = value;
					this.SendPropertyChanged("location");
					this.OnlocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Professor", Storage="_Professors", ThisKey="Dept_no", OtherKey="Dept_no")]
		public EntitySet<Professor> Professors
		{
			get
			{
				return this._Professors;
			}
			set
			{
				this._Professors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Student", Storage="_Students", ThisKey="Dept_no", OtherKey="Dept_no")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Professors(Professor entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Professors(Professor entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Enrollment")]
	public partial class Enrollment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Course_code;
		
		private int _Semester_id;
		
		private int _Student_id;
		
		private System.Nullable<decimal> _Year_work;
		
		private System.Nullable<decimal> _Project_marks;
		
		private System.Nullable<decimal> _Final_exam;
		
		private System.Nullable<decimal> _Total_marks;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourse_codeChanging(int value);
    partial void OnCourse_codeChanged();
    partial void OnSemester_idChanging(int value);
    partial void OnSemester_idChanged();
    partial void OnStudent_idChanging(int value);
    partial void OnStudent_idChanged();
    partial void OnYear_workChanging(System.Nullable<decimal> value);
    partial void OnYear_workChanged();
    partial void OnProject_marksChanging(System.Nullable<decimal> value);
    partial void OnProject_marksChanged();
    partial void OnFinal_examChanging(System.Nullable<decimal> value);
    partial void OnFinal_examChanged();
    partial void OnTotal_marksChanging(System.Nullable<decimal> value);
    partial void OnTotal_marksChanged();
    #endregion
		
		public Enrollment()
		{
			this._Class = default(EntityRef<Class>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Course_code", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Course_code
		{
			get
			{
				return this._Course_code;
			}
			set
			{
				if ((this._Course_code != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourse_codeChanging(value);
					this.SendPropertyChanging();
					this._Course_code = value;
					this.SendPropertyChanged("Course_code");
					this.OnCourse_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Semester_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Semester_id
		{
			get
			{
				return this._Semester_id;
			}
			set
			{
				if ((this._Semester_id != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSemester_idChanging(value);
					this.SendPropertyChanging();
					this._Semester_id = value;
					this.SendPropertyChanged("Semester_id");
					this.OnSemester_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Student_id
		{
			get
			{
				return this._Student_id;
			}
			set
			{
				if ((this._Student_id != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudent_idChanging(value);
					this.SendPropertyChanging();
					this._Student_id = value;
					this.SendPropertyChanged("Student_id");
					this.OnStudent_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year_work", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> Year_work
		{
			get
			{
				return this._Year_work;
			}
			set
			{
				if ((this._Year_work != value))
				{
					this.OnYear_workChanging(value);
					this.SendPropertyChanging();
					this._Year_work = value;
					this.SendPropertyChanged("Year_work");
					this.OnYear_workChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Project_marks", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> Project_marks
		{
			get
			{
				return this._Project_marks;
			}
			set
			{
				if ((this._Project_marks != value))
				{
					this.OnProject_marksChanging(value);
					this.SendPropertyChanging();
					this._Project_marks = value;
					this.SendPropertyChanged("Project_marks");
					this.OnProject_marksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Final_exam", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> Final_exam
		{
			get
			{
				return this._Final_exam;
			}
			set
			{
				if ((this._Final_exam != value))
				{
					this.OnFinal_examChanging(value);
					this.SendPropertyChanging();
					this._Final_exam = value;
					this.SendPropertyChanged("Final_exam");
					this.OnFinal_examChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total_marks", DbType="Decimal(5,0)")]
		public System.Nullable<decimal> Total_marks
		{
			get
			{
				return this._Total_marks;
			}
			set
			{
				if ((this._Total_marks != value))
				{
					this.OnTotal_marksChanging(value);
					this.SendPropertyChanging();
					this._Total_marks = value;
					this.SendPropertyChanged("Total_marks");
					this.OnTotal_marksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Enrollment", Storage="_Class", ThisKey="Course_code,Semester_id", OtherKey="Course_code,Semester_id", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.Enrollments.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.Enrollments.Add(this);
						this._Course_code = value.Course_code;
						this._Semester_id = value.Semester_id;
					}
					else
					{
						this._Course_code = default(int);
						this._Semester_id = default(int);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Enrollment", Storage="_Student", ThisKey="Student_id", OtherKey="Student_id", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Enrollments.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Enrollments.Add(this);
						this._Student_id = value.Student_id;
					}
					else
					{
						this._Student_id = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Professor")]
	public partial class Professor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Professor_id;
		
		private string _First_name;
		
		private string _Last_name;
		
		private string _Address;
		
		private System.Nullable<System.DateTime> _DOB;
		
		private System.Nullable<int> _Dept_no;
		
		private string _Username;
		
		private string _Password;
		
		private EntitySet<Course> _Courses;
		
		private EntitySet<Professor_Phone> _Professor_Phones;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProfessor_idChanging(int value);
    partial void OnProfessor_idChanged();
    partial void OnFirst_nameChanging(string value);
    partial void OnFirst_nameChanged();
    partial void OnLast_nameChanging(string value);
    partial void OnLast_nameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnDOBChanged();
    partial void OnDept_noChanging(System.Nullable<int> value);
    partial void OnDept_noChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Professor()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			this._Professor_Phones = new EntitySet<Professor_Phone>(new Action<Professor_Phone>(this.attach_Professor_Phones), new Action<Professor_Phone>(this.detach_Professor_Phones));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Professor_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Professor_id
		{
			get
			{
				return this._Professor_id;
			}
			set
			{
				if ((this._Professor_id != value))
				{
					this.OnProfessor_idChanging(value);
					this.SendPropertyChanging();
					this._Professor_id = value;
					this.SendPropertyChanged("Professor_id");
					this.OnProfessor_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_First_name", DbType="VarChar(50)")]
		public string First_name
		{
			get
			{
				return this._First_name;
			}
			set
			{
				if ((this._First_name != value))
				{
					this.OnFirst_nameChanging(value);
					this.SendPropertyChanging();
					this._First_name = value;
					this.SendPropertyChanged("First_name");
					this.OnFirst_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_name", DbType="VarChar(50)")]
		public string Last_name
		{
			get
			{
				return this._Last_name;
			}
			set
			{
				if ((this._Last_name != value))
				{
					this.OnLast_nameChanging(value);
					this.SendPropertyChanging();
					this._Last_name = value;
					this.SendPropertyChanged("Last_name");
					this.OnLast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="Date")]
		public System.Nullable<System.DateTime> DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dept_no", DbType="Int")]
		public System.Nullable<int> Dept_no
		{
			get
			{
				return this._Dept_no;
			}
			set
			{
				if ((this._Dept_no != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDept_noChanging(value);
					this.SendPropertyChanging();
					this._Dept_no = value;
					this.SendPropertyChanged("Dept_no");
					this.OnDept_noChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(20)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(20)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Professor_Course", Storage="_Courses", ThisKey="Professor_id", OtherKey="Professor_id")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Professor_Professor_Phone", Storage="_Professor_Phones", ThisKey="Professor_id", OtherKey="Professor_id")]
		public EntitySet<Professor_Phone> Professor_Phones
		{
			get
			{
				return this._Professor_Phones;
			}
			set
			{
				this._Professor_Phones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Professor", Storage="_Department", ThisKey="Dept_no", OtherKey="Dept_no", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Professors.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Professors.Add(this);
						this._Dept_no = value.Dept_no;
					}
					else
					{
						this._Dept_no = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Professor = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Professor = null;
		}
		
		private void attach_Professor_Phones(Professor_Phone entity)
		{
			this.SendPropertyChanging();
			entity.Professor = this;
		}
		
		private void detach_Professor_Phones(Professor_Phone entity)
		{
			this.SendPropertyChanging();
			entity.Professor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Professor_Phones")]
	public partial class Professor_Phone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Serial;
		
		private int _Professor_id;
		
		private string _Phone_no;
		
		private EntityRef<Professor> _Professor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSerialChanging(int value);
    partial void OnSerialChanged();
    partial void OnProfessor_idChanging(int value);
    partial void OnProfessor_idChanged();
    partial void OnPhone_noChanging(string value);
    partial void OnPhone_noChanged();
    #endregion
		
		public Professor_Phone()
		{
			this._Professor = default(EntityRef<Professor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Serial", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Serial
		{
			get
			{
				return this._Serial;
			}
			set
			{
				if ((this._Serial != value))
				{
					this.OnSerialChanging(value);
					this.SendPropertyChanging();
					this._Serial = value;
					this.SendPropertyChanged("Serial");
					this.OnSerialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Professor_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Professor_id
		{
			get
			{
				return this._Professor_id;
			}
			set
			{
				if ((this._Professor_id != value))
				{
					if (this._Professor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfessor_idChanging(value);
					this.SendPropertyChanging();
					this._Professor_id = value;
					this.SendPropertyChanged("Professor_id");
					this.OnProfessor_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone_no", DbType="VarChar(20)")]
		public string Phone_no
		{
			get
			{
				return this._Phone_no;
			}
			set
			{
				if ((this._Phone_no != value))
				{
					this.OnPhone_noChanging(value);
					this.SendPropertyChanging();
					this._Phone_no = value;
					this.SendPropertyChanged("Phone_no");
					this.OnPhone_noChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Professor_Professor_Phone", Storage="_Professor", ThisKey="Professor_id", OtherKey="Professor_id", IsForeignKey=true)]
		public Professor Professor
		{
			get
			{
				return this._Professor.Entity;
			}
			set
			{
				Professor previousValue = this._Professor.Entity;
				if (((previousValue != value) 
							|| (this._Professor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Professor.Entity = null;
						previousValue.Professor_Phones.Remove(this);
					}
					this._Professor.Entity = value;
					if ((value != null))
					{
						value.Professor_Phones.Add(this);
						this._Professor_id = value.Professor_id;
					}
					else
					{
						this._Professor_id = default(int);
					}
					this.SendPropertyChanged("Professor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Semester")]
	public partial class Semester : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Semester_code;
		
		private string _Semester_name;
		
		private EntitySet<Semester_Year> _Semester_Years;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSemester_codeChanging(int value);
    partial void OnSemester_codeChanged();
    partial void OnSemester_nameChanging(string value);
    partial void OnSemester_nameChanged();
    #endregion
		
		public Semester()
		{
			this._Semester_Years = new EntitySet<Semester_Year>(new Action<Semester_Year>(this.attach_Semester_Years), new Action<Semester_Year>(this.detach_Semester_Years));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Semester_code", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Semester_code
		{
			get
			{
				return this._Semester_code;
			}
			set
			{
				if ((this._Semester_code != value))
				{
					this.OnSemester_codeChanging(value);
					this.SendPropertyChanging();
					this._Semester_code = value;
					this.SendPropertyChanged("Semester_code");
					this.OnSemester_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Semester_name", DbType="VarChar(50)")]
		public string Semester_name
		{
			get
			{
				return this._Semester_name;
			}
			set
			{
				if ((this._Semester_name != value))
				{
					this.OnSemester_nameChanging(value);
					this.SendPropertyChanging();
					this._Semester_name = value;
					this.SendPropertyChanged("Semester_name");
					this.OnSemester_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_Semester_Year", Storage="_Semester_Years", ThisKey="Semester_code", OtherKey="Semester_code")]
		public EntitySet<Semester_Year> Semester_Years
		{
			get
			{
				return this._Semester_Years;
			}
			set
			{
				this._Semester_Years.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Semester_Years(Semester_Year entity)
		{
			this.SendPropertyChanging();
			entity.Semester = this;
		}
		
		private void detach_Semester_Years(Semester_Year entity)
		{
			this.SendPropertyChanging();
			entity.Semester = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Semester_Year")]
	public partial class Semester_Year : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Semester_id;
		
		private System.Nullable<int> _Semester_code;
		
		private string _Year;
		
		private EntitySet<Class> _Classes;
		
		private EntityRef<Semester> _Semester;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSemester_idChanging(int value);
    partial void OnSemester_idChanged();
    partial void OnSemester_codeChanging(System.Nullable<int> value);
    partial void OnSemester_codeChanged();
    partial void OnYearChanging(string value);
    partial void OnYearChanged();
    #endregion
		
		public Semester_Year()
		{
			this._Classes = new EntitySet<Class>(new Action<Class>(this.attach_Classes), new Action<Class>(this.detach_Classes));
			this._Semester = default(EntityRef<Semester>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Semester_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Semester_id
		{
			get
			{
				return this._Semester_id;
			}
			set
			{
				if ((this._Semester_id != value))
				{
					this.OnSemester_idChanging(value);
					this.SendPropertyChanging();
					this._Semester_id = value;
					this.SendPropertyChanged("Semester_id");
					this.OnSemester_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Semester_code", DbType="Int")]
		public System.Nullable<int> Semester_code
		{
			get
			{
				return this._Semester_code;
			}
			set
			{
				if ((this._Semester_code != value))
				{
					if (this._Semester.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSemester_codeChanging(value);
					this.SendPropertyChanging();
					this._Semester_code = value;
					this.SendPropertyChanged("Semester_code");
					this.OnSemester_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="VarChar(4)")]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_Year_Class", Storage="_Classes", ThisKey="Semester_id", OtherKey="Semester_id")]
		public EntitySet<Class> Classes
		{
			get
			{
				return this._Classes;
			}
			set
			{
				this._Classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_Semester_Year", Storage="_Semester", ThisKey="Semester_code", OtherKey="Semester_code", IsForeignKey=true)]
		public Semester Semester
		{
			get
			{
				return this._Semester.Entity;
			}
			set
			{
				Semester previousValue = this._Semester.Entity;
				if (((previousValue != value) 
							|| (this._Semester.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Semester.Entity = null;
						previousValue.Semester_Years.Remove(this);
					}
					this._Semester.Entity = value;
					if ((value != null))
					{
						value.Semester_Years.Add(this);
						this._Semester_code = value.Semester_code;
					}
					else
					{
						this._Semester_code = default(Nullable<int>);
					}
					this.SendPropertyChanged("Semester");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Semester_Year = this;
		}
		
		private void detach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Semester_Year = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Student_id;
		
		private string _First_name;
		
		private string _Last_name;
		
		private string _Address;
		
		private System.Nullable<System.DateTime> _DOB;
		
		private System.Nullable<bool> _Gender;
		
		private System.Nullable<int> _Dept_no;
		
		private EntitySet<Enrollment> _Enrollments;
		
		private EntitySet<Student_Phone> _Student_Phones;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudent_idChanging(int value);
    partial void OnStudent_idChanged();
    partial void OnFirst_nameChanging(string value);
    partial void OnFirst_nameChanged();
    partial void OnLast_nameChanging(string value);
    partial void OnLast_nameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnDOBChanged();
    partial void OnGenderChanging(System.Nullable<bool> value);
    partial void OnGenderChanged();
    partial void OnDept_noChanging(System.Nullable<int> value);
    partial void OnDept_noChanged();
    #endregion
		
		public Student()
		{
			this._Enrollments = new EntitySet<Enrollment>(new Action<Enrollment>(this.attach_Enrollments), new Action<Enrollment>(this.detach_Enrollments));
			this._Student_Phones = new EntitySet<Student_Phone>(new Action<Student_Phone>(this.attach_Student_Phones), new Action<Student_Phone>(this.detach_Student_Phones));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Student_id
		{
			get
			{
				return this._Student_id;
			}
			set
			{
				if ((this._Student_id != value))
				{
					this.OnStudent_idChanging(value);
					this.SendPropertyChanging();
					this._Student_id = value;
					this.SendPropertyChanged("Student_id");
					this.OnStudent_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_First_name", DbType="VarChar(50)")]
		public string First_name
		{
			get
			{
				return this._First_name;
			}
			set
			{
				if ((this._First_name != value))
				{
					this.OnFirst_nameChanging(value);
					this.SendPropertyChanging();
					this._First_name = value;
					this.SendPropertyChanged("First_name");
					this.OnFirst_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_name", DbType="VarChar(50)")]
		public string Last_name
		{
			get
			{
				return this._Last_name;
			}
			set
			{
				if ((this._Last_name != value))
				{
					this.OnLast_nameChanging(value);
					this.SendPropertyChanging();
					this._Last_name = value;
					this.SendPropertyChanged("Last_name");
					this.OnLast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="Date")]
		public System.Nullable<System.DateTime> DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit")]
		public System.Nullable<bool> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dept_no", DbType="Int")]
		public System.Nullable<int> Dept_no
		{
			get
			{
				return this._Dept_no;
			}
			set
			{
				if ((this._Dept_no != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDept_noChanging(value);
					this.SendPropertyChanging();
					this._Dept_no = value;
					this.SendPropertyChanged("Dept_no");
					this.OnDept_noChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Enrollment", Storage="_Enrollments", ThisKey="Student_id", OtherKey="Student_id")]
		public EntitySet<Enrollment> Enrollments
		{
			get
			{
				return this._Enrollments;
			}
			set
			{
				this._Enrollments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Student_Phone", Storage="_Student_Phones", ThisKey="Student_id", OtherKey="Student_id")]
		public EntitySet<Student_Phone> Student_Phones
		{
			get
			{
				return this._Student_Phones;
			}
			set
			{
				this._Student_Phones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Student", Storage="_Department", ThisKey="Dept_no", OtherKey="Dept_no", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._Dept_no = value.Dept_no;
					}
					else
					{
						this._Dept_no = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Enrollments(Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Enrollments(Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_Student_Phones(Student_Phone entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Student_Phones(Student_Phone entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student_Phones")]
	public partial class Student_Phone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Serial;
		
		private int _Student_id;
		
		private string _Phone_no;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSerialChanging(int value);
    partial void OnSerialChanged();
    partial void OnStudent_idChanging(int value);
    partial void OnStudent_idChanged();
    partial void OnPhone_noChanging(string value);
    partial void OnPhone_noChanged();
    #endregion
		
		public Student_Phone()
		{
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Serial", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Serial
		{
			get
			{
				return this._Serial;
			}
			set
			{
				if ((this._Serial != value))
				{
					this.OnSerialChanging(value);
					this.SendPropertyChanging();
					this._Serial = value;
					this.SendPropertyChanged("Serial");
					this.OnSerialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Student_id
		{
			get
			{
				return this._Student_id;
			}
			set
			{
				if ((this._Student_id != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudent_idChanging(value);
					this.SendPropertyChanging();
					this._Student_id = value;
					this.SendPropertyChanged("Student_id");
					this.OnStudent_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone_no", DbType="VarChar(20)")]
		public string Phone_no
		{
			get
			{
				return this._Phone_no;
			}
			set
			{
				if ((this._Phone_no != value))
				{
					this.OnPhone_noChanging(value);
					this.SendPropertyChanging();
					this._Phone_no = value;
					this.SendPropertyChanged("Phone_no");
					this.OnPhone_noChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Student_Phone", Storage="_Student", ThisKey="Student_id", OtherKey="Student_id", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Student_Phones.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Student_Phones.Add(this);
						this._Student_id = value.Student_id;
					}
					else
					{
						this._Student_id = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
